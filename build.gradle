apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

version = file('version').text
ext.tf_vendor = 'Triniforce.com'


// Project configuration is used for Maven deploy:
group = 'com.triniforce'

ext.vartifactId = 'tf-toolkit-mobile'


// Get dynamic environment settings
apply from: 'config.gradle'

ext.testFolderDir = new File(buildDir, 'test')


defaultTasks 'clean', 'ide'

repositories {
    mavenCentral()
	maven {
		url 'https://dev.untill.com/artifactory/repo'
	}
}

processResources {
	from('src') {
		include '**/*.properties'
		include '**/*.wiki'
		include '**/*.bsh'
		include '**/*.htm'
	}
	from('test') {
		include '**/*.jar'
		include '**/*.bs'
		include '**/*.txt'
		include '**/*.properties'
		include '**/*.soap'
		include '**/*.wiki'
		include '**/*.FDB'

	}
}

configurations {
	providedCompile
}

dependencies {

	testCompile(group: 'org.jmock', name: 'jmock', version: '2.5.1')
	testCompile(group: 'junit', name: 'junit', version: '3.8.2', force: true)
}

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

sourceSets {
	main.java.srcDirs = ['src']
	test.java.srcDirs = ['test']
	in.java.srcDirs = ['investigation']

}

import org.gradle.plugins.ide.eclipse.model.AccessRule

tasks.eclipse.dependsOn(cleanEclipse)
eclipse {
	classpath {
		downloadJavadoc = true
		plusConfigurations += [configurations.providedCompile]
		file {
			whenMerged {
					def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
					jre.accessRules.add(new AccessRule('accessible', 'com/sun/net/**'))
			}
		}
	}
	jdt.file.withProperties{
		it['org.eclipse.jdt.core.compiler.problem.rawTypeReference']='ignore'
		it['org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation']='ignore'
	}
}

//eclipseJdt << {
//	file('.settings/org.eclipse.core.resources.prefs').write(
//		'eclipse.preferences.version=1\n' +
//		'encoding/<project>=UTF-8\n'
//	)
//}

task ide(dependsOn: tasks.eclipse) {
	group = 'IDE'
	description = 'preparing for work in the development environment'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives sourcesJar
}


task jar_lib(type: Copy, dependsOn:[jar]){
	from "${jar.destinationDir}/${jar.archiveName}"
	into "$System.env.TF_LIB_HOME/srvdist"
	rename { String fileName -> 'tf-server-toolkit.jar' }
}

jar_lib.doFirst{
	def envName = 'TF_LIB_HOME'
	def env = System.env[envName]
	if (null == env || env.length() == 0){
		throw new StopExecutionException("Variable $envName must point to TF_LIB HOME")
	}
}

jar {
	manifest {
		attributes(
			'Specification-Title': project.name,
			'Specification-Version': version,
			'Specification-Vendor': tf_vendor,
			'Implementation-Title': project.name,
			'Implementation-Version': "$version (${new Date().format('yyyy-MM-dd')})",
			'Implementation-Vendor': tf_vendor
		)
	}
}

task prepareTestFolder {
}


import org.gradle.api.tasks.testing.logging.TestExceptionFormat;
test {
	dependsOn prepareTestFolder
	doFirst {
		environment.put('TF_SERVER_TOOLKIT_TEST_FOLDER', testFolderDir)
	}

	minHeapSize = '128m'
	maxHeapSize = '256m'

	testLogging {
        	events "failed"
		exceptionFormat TestExceptionFormat.FULL
	        showExceptions true
        	showCauses true
	        showStackTraces true	
	}
}

uploadArchives {
	dependsOn check
	repositories.mavenDeployer {
		repository(url: untillMavenPublishUrl) {
			authentication(userName: untillMavenPublishUsername, password: untillMavenPublishPassword)
		}
		snapshotRepository(url: untillMavenPublishSnapshotUrl) {
			authentication(userName: untillMavenPublishUsername, password: untillMavenPublishPassword)
		}
	}
}

